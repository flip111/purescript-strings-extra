module Test.Main where

import Data.String.Extra as String
import Effect (Effect)
import Effect.Console (log)
import Prelude (Unit, ($), (==), (*>), discard)
import Test.Assert (assert)

main :: Effect Unit
main = do
  log "camelCase" *> do
    assert $ String.camelCase "" == ""
    assert $ String.camelCase " " == ""
    assert $ String.camelCase "\n" == ""
    assert $ String.camelCase "ğŸ™ƒ" == "ğŸ™ƒ"
    assert $ String.camelCase "Thor" == "thor"
    assert $ String.camelCase "Thor, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == "thorMÃ­mirÄ’ostreJÃ¶rÃ°"
    assert $ String.camelCase "ğŸ™ƒ, MÃ­mir, Ä“ostre, & JÃ¶rÃ°" == "ğŸ™ƒMÃ­mirÄ’ostreJÃ¶rÃ°"
    assert $ String.camelCase "thorMÃ­mir--Ä’ostre_JÃ¶rÃ°" == "thorMÃ­mirÄ’ostreJÃ¶rÃ°"

  log "kebabCase" *> do
    assert $ String.kebabCase "" == ""
    assert $ String.kebabCase " " == ""
    assert $ String.kebabCase "\n" == ""
    assert $ String.kebabCase "ğŸ™ƒ" == "ğŸ™ƒ"
    assert $ String.kebabCase "Thor" == "thor"
    assert $ String.kebabCase "Thor, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == "thor-mÃ­mir-Ä“ostre-jÃ¶rÃ°"
    assert $ String.kebabCase "ğŸ™ƒ, MÃ­mir, Ä“ostre, & JÃ¶rÃ°" == "ğŸ™ƒ-mÃ­mir-Ä“ostre-jÃ¶rÃ°"
    assert $ String.kebabCase "thorMÃ­mir--Ä’ostre_JÃ¶rÃ°" == "thor-mÃ­mir-Ä“ostre-jÃ¶rÃ°"

  log "pascalCase" *> do
    assert $ String.pascalCase "" == ""
    assert $ String.pascalCase " " == ""
    assert $ String.pascalCase "\n" == ""
    assert $ String.pascalCase "ğŸ™ƒ" == "ğŸ™ƒ"
    assert $ String.pascalCase "Thor" == "Thor"
    assert $ String.pascalCase "Thor, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == "ThorMÃ­mirÄ’ostreJÃ¶rÃ°"
    assert $ String.pascalCase "ğŸ™ƒ, MÃ­mir, Ä“ostre, & JÃ¶rÃ°" == "ğŸ™ƒMÃ­mirÄ’ostreJÃ¶rÃ°"
    assert $ String.pascalCase "thorMÃ­mir--Ä’ostre_JÃ¶rÃ°" == "ThorMÃ­mirÄ’ostreJÃ¶rÃ°"

  log "snakeCase" *> do
    assert $ String.snakeCase "" == ""
    assert $ String.snakeCase " " == ""
    assert $ String.snakeCase "\n" == ""
    assert $ String.snakeCase "ğŸ™ƒ" == "ğŸ™ƒ"
    assert $ String.snakeCase "Thor" == "thor"
    assert $ String.snakeCase "Thor, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == "thor_mÃ­mir_Ä“ostre_jÃ¶rÃ°"
    assert $ String.snakeCase "ğŸ™ƒ, MÃ­mir, Ä“ostre, & JÃ¶rÃ°" == "ğŸ™ƒ_mÃ­mir_Ä“ostre_jÃ¶rÃ°"
    assert $ String.snakeCase "thorMÃ­mir--Ä’ostre_JÃ¶rÃ°" == "thor_mÃ­mir_Ä“ostre_jÃ¶rÃ°"

  log "words" *> do
    assert $ String.words "" == []
    assert $ String.words " " == []
    assert $ String.words "\n" == []
    assert $ String.words "ğŸ™ƒ" == [ "ğŸ™ƒ" ]
    assert $ String.words "Thor" == [ "Thor" ]
    assert $ String.words "Thor, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == [ "Thor", "MÃ­mir", "Ä’ostre", "JÃ¶rÃ°" ]
    assert $ String.words "ğŸ™ƒ, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == [ "ğŸ™ƒ", "MÃ­mir", "Ä’ostre", "JÃ¶rÃ°" ]
    assert $ String.words "thorMÃ­mir--Ä’ostre_JÃ¶rÃ°" == [ "thor", "MÃ­mir", "Ä’ostre", "JÃ¶rÃ°" ]
