module Test.Main where

import Data.String.Extra as String
import Effect (Effect)
import Effect.Console (log)
import Prelude (Unit, ($), (==), (*>), discard)
import Test.Assert (assert)
import Data.Number.Approximate ((â‰…))

main :: Effect Unit
main = do
  log "camelCase" *> do
    assert $ String.camelCase "" == ""
    assert $ String.camelCase " " == ""
    assert $ String.camelCase "\n" == ""
    assert $ String.camelCase "ðŸ™ƒ" == "ðŸ™ƒ"
    assert $ String.camelCase "Thor" == "thor"
    assert $ String.camelCase "Thor, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == "thorMÃ­mirÄ’ostreJÃ¶rÃ°"
    assert $ String.camelCase "ðŸ™ƒ, MÃ­mir, Ä“ostre, & JÃ¶rÃ°" == "ðŸ™ƒMÃ­mirÄ’ostreJÃ¶rÃ°"
    assert $ String.camelCase "thorMÃ­mir--Ä’ostre_JÃ¶rÃ°" == "thorMÃ­mirÄ’ostreJÃ¶rÃ°"

  log "kebabCase" *> do
    assert $ String.kebabCase "" == ""
    assert $ String.kebabCase " " == ""
    assert $ String.kebabCase "\n" == ""
    assert $ String.kebabCase "ðŸ™ƒ" == "ðŸ™ƒ"
    assert $ String.kebabCase "Thor" == "thor"
    assert $ String.kebabCase "Thor, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == "thor-mÃ­mir-Ä“ostre-jÃ¶rÃ°"
    assert $ String.kebabCase "ðŸ™ƒ, MÃ­mir, Ä“ostre, & JÃ¶rÃ°" == "ðŸ™ƒ-mÃ­mir-Ä“ostre-jÃ¶rÃ°"
    assert $ String.kebabCase "thorMÃ­mir--Ä’ostre_JÃ¶rÃ°" == "thor-mÃ­mir-Ä“ostre-jÃ¶rÃ°"

  log "pascalCase" *> do
    assert $ String.pascalCase "" == ""
    assert $ String.pascalCase " " == ""
    assert $ String.pascalCase "\n" == ""
    assert $ String.pascalCase "ðŸ™ƒ" == "ðŸ™ƒ"
    assert $ String.pascalCase "Thor" == "Thor"
    assert $ String.pascalCase "Thor, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == "ThorMÃ­mirÄ’ostreJÃ¶rÃ°"
    assert $ String.pascalCase "ðŸ™ƒ, MÃ­mir, Ä“ostre, & JÃ¶rÃ°" == "ðŸ™ƒMÃ­mirÄ’ostreJÃ¶rÃ°"
    assert $ String.pascalCase "thorMÃ­mir--Ä’ostre_JÃ¶rÃ°" == "ThorMÃ­mirÄ’ostreJÃ¶rÃ°"

  log "snakeCase" *> do
    assert $ String.snakeCase "" == ""
    assert $ String.snakeCase " " == ""
    assert $ String.snakeCase "\n" == ""
    assert $ String.snakeCase "ðŸ™ƒ" == "ðŸ™ƒ"
    assert $ String.snakeCase "Thor" == "thor"
    assert $ String.snakeCase "Thor, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == "thor_mÃ­mir_Ä“ostre_jÃ¶rÃ°"
    assert $ String.snakeCase "ðŸ™ƒ, MÃ­mir, Ä“ostre, & JÃ¶rÃ°" == "ðŸ™ƒ_mÃ­mir_Ä“ostre_jÃ¶rÃ°"
    assert $ String.snakeCase "thorMÃ­mir--Ä’ostre_JÃ¶rÃ°" == "thor_mÃ­mir_Ä“ostre_jÃ¶rÃ°"

  log "words" *> do
    assert $ String.words "" == []
    assert $ String.words " " == []
    assert $ String.words "\n" == []
    assert $ String.words "ðŸ™ƒ" == [ "ðŸ™ƒ" ]
    assert $ String.words "Thor" == [ "Thor" ]
    assert $ String.words "Thor, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == [ "Thor", "MÃ­mir", "Ä’ostre", "JÃ¶rÃ°" ]
    assert $ String.words "ðŸ™ƒ, MÃ­mir, Ä’ostre, & JÃ¶rÃ°" == [ "ðŸ™ƒ", "MÃ­mir", "Ä’ostre", "JÃ¶rÃ°" ]
    assert $ String.words "thorMÃ­mir--Ä’ostre_JÃ¶rÃ°" == [ "thor", "MÃ­mir", "Ä’ostre", "JÃ¶rÃ°" ]

  -- Verified with: https://planetcalc.com/1721/
  log "levenshtein" *> do
    assert $ String.levenshtein "CONSERVATIONALISTS" "CONVERSATIONALISTS" == 2
    assert $ String.levenshtein "WHIRLED" "WORLD" == 3
    assert $ String.levenshtein "COMPLEMENT" "COMPLIMENT" == 1
    assert $ String.levenshtein "BAZAAR" "BIZARRE" == 3
    assert $ String.levenshtein "ACCESSARY" "ACCESSORY" == 1
    assert $ String.levenshtein "ALGORITHMS ARE FUN" "LOGARITHMS ARE NOT" == 6
    assert $ String.levenshtein "ASSISTANCE" "ASSISTANTS" == 2
    assert $ String.levenshtein "ALL TOGETHER" "ALTOGETHER" == 2
    assert $ String.levenshtein "IDENTICAL STRINGS" "IDENTICAL STRINGS" == 0

  -- Verified with: http://www.algomation.com/algorithm/sorensen-dice-string-similarity
  log "sorensen_dice_coefficient" *> do
    assert $ String.sorensen_dice_coefficient "CONSERVATIONALISTS" "CONVERSATIONALISTS" â‰… 0.7647059
    assert $ String.sorensen_dice_coefficient "WHIRLED" "WORLD" â‰… 0.2000000
    assert $ String.sorensen_dice_coefficient "COMPLEMENT" "COMPLIMENT" â‰… 0.7777778
    assert $ String.sorensen_dice_coefficient "BAZAAR" "BIZARRE" â‰… 0.36363637
    assert $ String.sorensen_dice_coefficient "ACCESSARY" "ACCESSORY" â‰… 0.7500000
    assert $ String.sorensen_dice_coefficient "ALGORITHMS ARE FUN" "LOGARITHMS ARE NOT" â‰… 0.5882353
    assert $ String.sorensen_dice_coefficient "ASSISTANCE" "ASSISTANTS" â‰… 0.7777778
    assert $ String.sorensen_dice_coefficient "ALL TOGETHER" "ALTOGETHER" â‰… 0.8000000
    assert $ String.sorensen_dice_coefficient "IDENTICAL STRINGS" "IDENTICAL STRINGS" â‰… 1.0000000
